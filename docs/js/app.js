// Fetch and display posts
async function loadPosts() {
    const loadingEl = document.getElementById("loading");
    const postsEl = document.getElementById("posts");
    const errorEl = document.getElementById("error");
    const searchInput = document.getElementById("searchInput");

    try {
        // Load posts.json (generated by the scraper)
        const response = await fetch("posts.json");

        if (!response.ok) {
            throw new Error("Failed to load posts");
        }

        const posts = await response.json();

        // Hide loading
        loadingEl.style.display = "none";

        // Update stats
        updateStats(posts);

        // Store posts globally for search
        window.allPosts = posts;

        // Display posts
        displayPosts(posts);

        // Setup search
        searchInput.addEventListener("input", (e) => {
            const query = e.target.value.toLowerCase();
            const filtered = posts.filter(
                (post) => post.title.toLowerCase().includes(query) || post.author.toLowerCase().includes(query)
            );
            displayPosts(filtered);
        });
    } catch (error) {
        loadingEl.style.display = "none";
        errorEl.style.display = "block";
        errorEl.textContent = `Error loading posts: ${error.message}. Make sure to run the scraper first to generate posts.json`;
    }
}

function updateStats(posts) {
    const postCount = posts.length;
    const authors = new Set(posts.map((p) => p.author));
    const authorCount = authors.size;

    document.getElementById("postCount").textContent = postCount;
    document.getElementById("authorCount").textContent = authorCount;
    document.getElementById("lastUpdated").textContent = `Last updated: ${new Date().toLocaleString()}`;
}

function displayPosts(posts) {
    const postsEl = document.getElementById("posts");

    if (posts.length === 0) {
        postsEl.innerHTML = '<div class="loading">No posts found</div>';
        return;
    }

    postsEl.innerHTML = posts
        .map(
            (post) => `
        <div class="post-card">
            <div class="post-main">
                <div class="post-title">
                    <a href="${post.url}" target="_blank">${escapeHtml(post.title)}</a>
                </div>
                <div class="post-meta">
                    <span>üë§ <span class="post-author">${escapeHtml(post.author)}</span></span>
                    <span class="stat">üí¨ ${post.replies} replies</span>
                    <span class="stat">üëÅÔ∏è ${post.views} views</span>
                    ${post.pinned ? '<span class="stat">üìå Pinned</span>' : ""}
                </div>
            </div>
            <div class="post-dates">
                <div class="post-date">
                    <div class="date-label">Last activity</div>
                    <div class="date-value">${formatDate(post.last_posted_at)}</div>
                </div>
                <div class="post-date">
                    <div class="date-label">Created</div>
                    <div class="date-value">${formatDate(post.created_at)}</div>
                </div>
            </div>
        </div>
    `
        )
        .join("");
}

function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now - date);
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays === 0) {
        return "Today";
    } else if (diffDays === 1) {
        return "Yesterday";
    } else if (diffDays < 7) {
        return `${diffDays} days ago`;
    } else if (diffDays < 30) {
        return `${Math.floor(diffDays / 7)} weeks ago`;
    } else if (diffDays < 365) {
        return `${Math.floor(diffDays / 30)} months ago`;
    } else {
        return date.toLocaleDateString();
    }
}

function escapeHtml(text) {
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
}

// Theme Toggle Functionality
function initThemeToggle() {
    const themeToggle = document.getElementById("themeToggle");
    const themeIcon = themeToggle.querySelector(".theme-icon");
    const html = document.documentElement;

    // Check for saved theme preference or default to system preference
    const savedTheme = localStorage.getItem("theme");

    if (savedTheme) {
        html.setAttribute("data-theme", savedTheme);
        updateThemeIcon(savedTheme);
    } else {
        // Check system preference
        const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
        if (prefersDark) {
            updateThemeIcon("dark");
        }
    }

    // Toggle theme on button click
    themeToggle.addEventListener("click", () => {
        const currentTheme = html.getAttribute("data-theme");
        const newTheme = currentTheme === "dark" ? "light" : "dark";

        html.setAttribute("data-theme", newTheme);
        localStorage.setItem("theme", newTheme);
        updateThemeIcon(newTheme);
    });

    function updateThemeIcon(theme) {
        if (theme === "dark") {
            themeIcon.textContent = "‚òÄÔ∏è";
        } else {
            themeIcon.textContent = "üåô";
        }
    }

    // Listen for system theme changes when no manual preference is set
    window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e) => {
        if (!localStorage.getItem("theme")) {
            updateThemeIcon(e.matches ? "dark" : "light");
        }
    });
}

// Load posts when page loads
document.addEventListener("DOMContentLoaded", () => {
    loadPosts();
    initThemeToggle();
});
